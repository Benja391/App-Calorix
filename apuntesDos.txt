Descripci√≥n de la App
Calorix es una aplicaci√≥n web desarrollada con el stack Vue.js + Node.js + Express + MongoDB, dise√±ada para ayudar 
a los usuarios a llevar un control diario de las calor√≠as que consumen. Los usuarios 
pueden registrar comidas con sus respectivas calor√≠as, y la app se encarga de almacenarlas
en una base de datos y mostrarlas en una lista. Adem√°s, si el usuario escribe una comida 
conocida, la aplicaci√≥n puede autocompletar las calor√≠as bas√°ndose en una base de datos 
local o consultando una API de nutrici√≥n externa.

üìò Paso a paso para desarrollar la app Calorix
txt
Copiar
Editar
1. Crear la estructura del proyecto:
   - Carpeta frontend: donde vive el proyecto Vue.js
   - Carpeta backend: donde est√° el servidor con Node.js, Express y MongoDB

2. Backend (calorix-backend):
   - Inicializar proyecto: npm init -y
   - Instalar dependencias: express, cors, mongoose
   - Crear el archivo server.js para levantar el servidor y conectar con MongoDB
   - Crear un modelo de comida (comida.model.js) con mongoose (campos: nombre y calorias)
   - Crear las rutas (comidas.routes.js) para manejar:
       - GET /api/comidas ‚Üí obtener comidas
       - POST /api/comidas ‚Üí agregar comida

3. Conectar a MongoDB:
   - Usamos `mongoose.connect()` con la URI local de MongoDB
   - Se corrigi√≥ un error de "base de datos ya existe con diferente capitalizaci√≥n"
     cambiando el nombre de la DB a coincidir con el que ya exist√≠a

4. Frontend (calorix-frontend):
   - Crear proyecto Vue.js (con Vite o Vue CLI)
   - Crear un componente `ComidasList.vue` con:
     - Formulario para ingresar nombre y calor√≠as
     - Lista que muestra comidas ya guardadas
     - Eventos para agregar comida (`@submit.prevent`)
     - Carga de comidas en `onMounted()`

5. Conexi√≥n frontend-backend:
   - Se us√≥ `axios` para hacer peticiones GET y POST a `${import.meta.env.VITE_API_URL}/comidas`
   - Se agreg√≥ la librer√≠a `axios` con: `npm install axios`

6. Autocompletado de calor√≠as:
   - Se import√≥ una funci√≥n `obtenerCaloriasDesdeAPI` desde un archivo utilitario
   - Se agreg√≥ una base de datos local de alimentos con calor√≠as
   - Se cre√≥ la funci√≥n `buscarCalorias()` que:
       - Busca si el alimento existe en la base local
       - Si no, consulta la API de nutrici√≥n
     Esta funci√≥n se ejecuta al salir del campo nombre (`@blur`)

7. Estilo:
   - Se us√≥ TailwindCSS para aplicar estilos r√°pidos y responsivos en los formularios y listas

8. Resultado:
   - El usuario puede ingresar una comida, se autocompletan las calor√≠as (si est√°n disponibles)
     y se guarda en la base de datos para ser listada en la interfaz
